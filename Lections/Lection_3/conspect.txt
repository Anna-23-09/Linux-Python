--- Продвинутая работа с Pytest---


-- Декораторы --
- это обертки вокруг python-функций (или классов), которые
изменяют работу того, к чему они применяются
В Python декораторы используются,
в основном, для декорирования функций (или, соответственно, методов)
Декоратор - это функция, которая принимает функцию
и возвращает функцию.


-- Фикстуры --
- это особые декораторы
Для того, чтобы зарегистрировать функцию
как фикстуру, нужно использовать декоратор
@pytest.fixture.<name>
Фикстуры позволяют тестовым функциям легко
получать предварительно инициализированные
объекты и работать с ними, не заботясь
об импорте/установке/очистке
Фикстуры могут выполнять работу, а могут
возвращать данные в тестовую функцию.


-- YAML --
- это язык хранения информации
в формате понятном человеку.
Дословно, "Еще один язык разметки"
Позже, назвали "YAML не язык разметки"

В yaml-файле:
FOLDER_IN: home/user/tst

В остальном коде:
with open('config.yaml') as f:
    data = yaml.safe_load(f) #сначала открываем файл
Затем где надо:
data["FOLDER_IN"]


Если вы планируете использовать фикстуру
в нескольких тестах (файлах с тестами), то можно
объявить ее в специальном файле conftest.py

При этом импортировать ее не нужно - pytest найдет ее автоматически

Поиск фикстур начинается с тестовых классов, затем они ищутся:
- в тестовых модулях (файлах с тестами)
- в файлах conftest.py
- в последнюю очередь во встроенных и сторонних плагинах

-- Финализаторы в фикстуре --

...


-- Отчетность --

pytest test.py --junitxml=report.xml   - команда формирования отчетности
не особо читаемый, но информативный

pytest test.py --html=report.html   - в формате html, все удобно (надо скачать)

html-reporter - самый крутой на сегодняшний день (стильномодномолодежно)
тоже нужно скачать
pytest test.py --html-report=report.html


-- Конфигурационный файл pytest.ini --

