--- Вывод subprocess ---

- subprocess.PIPE
- subprocess.STDOUT
- subprocess.DEVNULL


DEVNULL - cпециальный файл в Linux, куда складывают всякий мусор (выводы программ, например)
PIPE - стандартное значение, которое указывает на то, что должен быть открыт канал к стандартному потоку.
STDOUT - сложно сформулировать...


--- Оператор assert ---
assert <условие>, сообщение

- работает как логическое выражение, проверяя,
является ли заданное условие истинным или ложным
- если условие истинно, то ничего не происходит,
и выполняется следующая строка кода
- если условие ложно, оператор assert останавливает выполнение программы
и выдает ошибку. В этом случае assert работает как
ключевое слово raise и выводит исключение
- исключение, вызванное оператором assert,
называется AssertionError


Фреймворк - программная платформа, определяющая структуру программной
системы;
- программное обеспечение, облегающее разработку и объединение
разных компонентов большого программного проекта


   ---    PYTEST   ---

- больше, чем фреймворк, это платформа для тестирования ПО
- программа командной строки, она предоставляет инструмент,
который автоматически находит написанные тесты, запускает тесты
и пишет отчеты с результатом

Достоинства:
- простые тесты легко написать в pytest
- сложные тесты тоже легко писать
- тесты очень легко читаются
- начать работу в pytest очень быстро
- можно использовать pytest для запуска тестов, написанных для unittest или nose

Требования к именованию:
- имя файла должно начинаться с "test" или заканчиваться на "test.py"
- имя тестовой функции внутри файла должно начинаться с "test_"

Запускаем тесты из консоли:
python3 -m pytest <имя файла, в котором прописаны тесты> -v

--- Ключи и параметры pytest ---

--collect-only - показывает, какие тесты будут выполняться с заданными параметрами
и конфигурацией, но не запускает их
Полезен для проверки правильности выбора других опций, которые выбирают тесты
перед запуском тестов

-k <название функции> - позволяет использовать выражение для определения
функций тестирования, т е выполнить 1 конкретную функцию

-m <название декоратора, которым обернуты функции для запуска>- способ пометить маркером подмножество тестовых функций для запуска

-x - Если тестовая функция обнаружит сбой assert или exception, выполнение этого теста
останавливается, и тест завершается ошибкой

--maxfail=<число> - если хотим, чтобы было допущено некоторое кол-во сбоев (<число>), но не больше

-s - позволяет печатать операторы - или любой другой вывод, который обычно печатается в stdout,
чтобы фактически быть напечатанным в стандартном выводе во время выполнения тестов.
Это сокращенный вариант для --capture=no (то же самое)

-lf - (last failed) вывести последний упавший тест

-ff - (first failed) вывести первый упавший тест

-v, или --verbose - удобно выводит инфу в консоли о пройденных тестах

-q - противоположна -v - сокращает объем информации в отчете

-l, или --showlocals - локальные переменные отображаются в отчете

--tb=<style> - отвечает за трассировку ошибок:
    --tb=no - полностью удаляет трассировку
    --tb=line - этого достаточно, чтобы показать, что не так. Сохраняет ошибку в 1 строке
    --tb=short - сокращенный вариант трассировки, печатает только assert и символ E без контекста
    --tb=long - наиболее исчерпывающий traceback
    --tb=auto - длинная версия для первого и последнего traceback
    --tb=native - покажет стандартную библиотеку traceback без доп информации

--durations=N - ускорить свой набор тестов. Она не меняет тесты, но сообщает самый медленный N номер
--durations=0 - сообщит обо всем в порядке от самого медленного к самому быстрому
